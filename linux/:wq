#include <linux/module.h>
#include <linux/fs.h>
#include <linux/spinlock.h>

#define BUF_SIZE 16

static DEFINE_RWLOCK(lock);
static char comento_buf[BUF_SIZE] = {0, };

static ssize_t comento_device_read(struct file *file, char __user *buf, size_t len, loff_t *ppos)
{
	ssize_t ret;
	read_lock(&lock);

	if(BUF_SIZE <= len + *ppos)
	{
		len = BUF_SIZE - *ppos;
	}

	ret = len - copy_to_user(buf, comento_buf + *ppos, len);
	*ppos += ret;

	read_unlock(&lock);

	return ret;
}

static ssize_t comento_device_write(struct file *file, const char __user *buf, size_t len, loff_t *ppos)
{
	ssize_t ret;
	write_lock(&lock);

	if(BUF_SIZE <= len + *ppos)
	{
		len = BUF_SIZE - *ppos;
	}

	ret = len - copy_from_user(comento_buf + *ppos, buf, len);
	*ppos += ret;

	write_unlock(&lock);

	return ret;
}

static int comento_device_open(struct inode *inode, struct file *file)
{
	int minor = iminor(inode);
	printk(KERN_DEBUG "%s - minor : %d\n", __func__, minor);

	return 0;
}

static struct file_operations fops = 
{
	.open = comento_device_open,
	.read = comento_device_read,
	.write = comento_device_write,
};

static int __init comento_module_init(void)
{
	printk(KERN_DEBUG "%s\n", __func__);
	int ret = register_chrdev(177, "comento", &fops);
	return ret;
}

static void __exit comento_module_exit(void)
{
	unregister_chrdev(177, "comento");
	printk(KERN_DEBUG "%s\n", __func__);
}

module_init(comento_module_init);
module_exit(comento_module_exit);

MODULE_AUTHOR("Jin Minu");
MODULE_DESCRIPTION("Example driver");
MODULE_LICENSE("GPL v2");
